/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvaildRequestMissingSubtypeWithGroupOrNameErrors struct for InvaildRequestMissingSubtypeWithGroupOrNameErrors
type InvaildRequestMissingSubtypeWithGroupOrNameErrors struct {
	Subtype []string `json:"subtype,omitempty"`
}

// NewInvaildRequestMissingSubtypeWithGroupOrNameErrors instantiates a new InvaildRequestMissingSubtypeWithGroupOrNameErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvaildRequestMissingSubtypeWithGroupOrNameErrors() *InvaildRequestMissingSubtypeWithGroupOrNameErrors {
	this := InvaildRequestMissingSubtypeWithGroupOrNameErrors{}
	return &this
}

// NewInvaildRequestMissingSubtypeWithGroupOrNameErrorsWithDefaults instantiates a new InvaildRequestMissingSubtypeWithGroupOrNameErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvaildRequestMissingSubtypeWithGroupOrNameErrorsWithDefaults() *InvaildRequestMissingSubtypeWithGroupOrNameErrors {
	this := InvaildRequestMissingSubtypeWithGroupOrNameErrors{}
	return &this
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *InvaildRequestMissingSubtypeWithGroupOrNameErrors) GetSubtype() []string {
	if o == nil || o.Subtype == nil {
		var ret []string
		return ret
	}
	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvaildRequestMissingSubtypeWithGroupOrNameErrors) GetSubtypeOk() ([]string, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *InvaildRequestMissingSubtypeWithGroupOrNameErrors) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given []string and assigns it to the Subtype field.
func (o *InvaildRequestMissingSubtypeWithGroupOrNameErrors) SetSubtype(v []string) {
	o.Subtype = v
}

func (o InvaildRequestMissingSubtypeWithGroupOrNameErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	return json.Marshal(toSerialize)
}

type NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors struct {
	value *InvaildRequestMissingSubtypeWithGroupOrNameErrors
	isSet bool
}

func (v NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors) Get() *InvaildRequestMissingSubtypeWithGroupOrNameErrors {
	return v.value
}

func (v *NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors) Set(val *InvaildRequestMissingSubtypeWithGroupOrNameErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvaildRequestMissingSubtypeWithGroupOrNameErrors(val *InvaildRequestMissingSubtypeWithGroupOrNameErrors) *NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors {
	return &NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors{value: val, isSet: true}
}

func (v NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvaildRequestMissingSubtypeWithGroupOrNameErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AlbumPayloadCover struct for AlbumPayloadCover
type AlbumPayloadCover struct {
	Id *string `json:"id,omitempty"`
}

// NewAlbumPayloadCover instantiates a new AlbumPayloadCover object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbumPayloadCover() *AlbumPayloadCover {
	this := AlbumPayloadCover{}
	return &this
}

// NewAlbumPayloadCoverWithDefaults instantiates a new AlbumPayloadCover object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumPayloadCoverWithDefaults() *AlbumPayloadCover {
	this := AlbumPayloadCover{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlbumPayloadCover) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayloadCover) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlbumPayloadCover) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlbumPayloadCover) SetId(v string) {
	o.Id = &v
}

func (o AlbumPayloadCover) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableAlbumPayloadCover struct {
	value *AlbumPayloadCover
	isSet bool
}

func (v NullableAlbumPayloadCover) Get() *AlbumPayloadCover {
	return v.value
}

func (v *NullableAlbumPayloadCover) Set(val *AlbumPayloadCover) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbumPayloadCover) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbumPayloadCover) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbumPayloadCover(val *AlbumPayloadCover) *NullableAlbumPayloadCover {
	return &NullableAlbumPayloadCover{value: val, isSet: true}
}

func (v NullableAlbumPayloadCover) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbumPayloadCover) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



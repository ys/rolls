/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvaildRequestFavoriteErrors struct for InvaildRequestFavoriteErrors
type InvaildRequestFavoriteErrors struct {
	Favorite []string `json:"favorite,omitempty"`
}

// NewInvaildRequestFavoriteErrors instantiates a new InvaildRequestFavoriteErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvaildRequestFavoriteErrors() *InvaildRequestFavoriteErrors {
	this := InvaildRequestFavoriteErrors{}
	return &this
}

// NewInvaildRequestFavoriteErrorsWithDefaults instantiates a new InvaildRequestFavoriteErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvaildRequestFavoriteErrorsWithDefaults() *InvaildRequestFavoriteErrors {
	this := InvaildRequestFavoriteErrors{}
	return &this
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *InvaildRequestFavoriteErrors) GetFavorite() []string {
	if o == nil || o.Favorite == nil {
		var ret []string
		return ret
	}
	return o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvaildRequestFavoriteErrors) GetFavoriteOk() ([]string, bool) {
	if o == nil || o.Favorite == nil {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *InvaildRequestFavoriteErrors) HasFavorite() bool {
	if o != nil && o.Favorite != nil {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given []string and assigns it to the Favorite field.
func (o *InvaildRequestFavoriteErrors) SetFavorite(v []string) {
	o.Favorite = v
}

func (o InvaildRequestFavoriteErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Favorite != nil {
		toSerialize["favorite"] = o.Favorite
	}
	return json.Marshal(toSerialize)
}

type NullableInvaildRequestFavoriteErrors struct {
	value *InvaildRequestFavoriteErrors
	isSet bool
}

func (v NullableInvaildRequestFavoriteErrors) Get() *InvaildRequestFavoriteErrors {
	return v.value
}

func (v *NullableInvaildRequestFavoriteErrors) Set(val *InvaildRequestFavoriteErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableInvaildRequestFavoriteErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableInvaildRequestFavoriteErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvaildRequestFavoriteErrors(val *InvaildRequestFavoriteErrors) *NullableInvaildRequestFavoriteErrors {
	return &NullableInvaildRequestFavoriteErrors{value: val, isSet: true}
}

func (v NullableInvaildRequestFavoriteErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvaildRequestFavoriteErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



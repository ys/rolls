/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetAsset400Response - struct for GetAsset400Response
type GetAsset400Response struct {
	InvaildRequestAssetIds *InvaildRequestAssetIds
	InvaildRequestFavorite *InvaildRequestFavorite
	InvaildRequestGUID *InvaildRequestGUID
	InvaildRequestGroup *InvaildRequestGroup
	InvaildRequestInvalidDateTime *InvaildRequestInvalidDateTime
	InvaildRequestMissingSubtypeWithFavorite *InvaildRequestMissingSubtypeWithFavorite
	InvaildRequestMissingSubtypeWithGroupOrName *InvaildRequestMissingSubtypeWithGroupOrName
	InvaildRequestName *InvaildRequestName
}

// InvaildRequestAssetIdsAsGetAsset400Response is a convenience function that returns InvaildRequestAssetIds wrapped in GetAsset400Response
func InvaildRequestAssetIdsAsGetAsset400Response(v *InvaildRequestAssetIds) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestAssetIds: v,
	}
}

// InvaildRequestFavoriteAsGetAsset400Response is a convenience function that returns InvaildRequestFavorite wrapped in GetAsset400Response
func InvaildRequestFavoriteAsGetAsset400Response(v *InvaildRequestFavorite) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestFavorite: v,
	}
}

// InvaildRequestGUIDAsGetAsset400Response is a convenience function that returns InvaildRequestGUID wrapped in GetAsset400Response
func InvaildRequestGUIDAsGetAsset400Response(v *InvaildRequestGUID) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestGUID: v,
	}
}

// InvaildRequestGroupAsGetAsset400Response is a convenience function that returns InvaildRequestGroup wrapped in GetAsset400Response
func InvaildRequestGroupAsGetAsset400Response(v *InvaildRequestGroup) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestGroup: v,
	}
}

// InvaildRequestInvalidDateTimeAsGetAsset400Response is a convenience function that returns InvaildRequestInvalidDateTime wrapped in GetAsset400Response
func InvaildRequestInvalidDateTimeAsGetAsset400Response(v *InvaildRequestInvalidDateTime) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestInvalidDateTime: v,
	}
}

// InvaildRequestMissingSubtypeWithFavoriteAsGetAsset400Response is a convenience function that returns InvaildRequestMissingSubtypeWithFavorite wrapped in GetAsset400Response
func InvaildRequestMissingSubtypeWithFavoriteAsGetAsset400Response(v *InvaildRequestMissingSubtypeWithFavorite) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestMissingSubtypeWithFavorite: v,
	}
}

// InvaildRequestMissingSubtypeWithGroupOrNameAsGetAsset400Response is a convenience function that returns InvaildRequestMissingSubtypeWithGroupOrName wrapped in GetAsset400Response
func InvaildRequestMissingSubtypeWithGroupOrNameAsGetAsset400Response(v *InvaildRequestMissingSubtypeWithGroupOrName) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestMissingSubtypeWithGroupOrName: v,
	}
}

// InvaildRequestNameAsGetAsset400Response is a convenience function that returns InvaildRequestName wrapped in GetAsset400Response
func InvaildRequestNameAsGetAsset400Response(v *InvaildRequestName) GetAsset400Response {
	return GetAsset400Response{
		InvaildRequestName: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAsset400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InvaildRequestAssetIds
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestAssetIds)
	if err == nil {
		jsonInvaildRequestAssetIds, _ := json.Marshal(dst.InvaildRequestAssetIds)
		if string(jsonInvaildRequestAssetIds) == "{}" { // empty struct
			dst.InvaildRequestAssetIds = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestAssetIds = nil
	}

	// try to unmarshal data into InvaildRequestFavorite
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestFavorite)
	if err == nil {
		jsonInvaildRequestFavorite, _ := json.Marshal(dst.InvaildRequestFavorite)
		if string(jsonInvaildRequestFavorite) == "{}" { // empty struct
			dst.InvaildRequestFavorite = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestFavorite = nil
	}

	// try to unmarshal data into InvaildRequestGUID
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestGUID)
	if err == nil {
		jsonInvaildRequestGUID, _ := json.Marshal(dst.InvaildRequestGUID)
		if string(jsonInvaildRequestGUID) == "{}" { // empty struct
			dst.InvaildRequestGUID = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestGUID = nil
	}

	// try to unmarshal data into InvaildRequestGroup
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestGroup)
	if err == nil {
		jsonInvaildRequestGroup, _ := json.Marshal(dst.InvaildRequestGroup)
		if string(jsonInvaildRequestGroup) == "{}" { // empty struct
			dst.InvaildRequestGroup = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestGroup = nil
	}

	// try to unmarshal data into InvaildRequestInvalidDateTime
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestInvalidDateTime)
	if err == nil {
		jsonInvaildRequestInvalidDateTime, _ := json.Marshal(dst.InvaildRequestInvalidDateTime)
		if string(jsonInvaildRequestInvalidDateTime) == "{}" { // empty struct
			dst.InvaildRequestInvalidDateTime = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestInvalidDateTime = nil
	}

	// try to unmarshal data into InvaildRequestMissingSubtypeWithFavorite
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestMissingSubtypeWithFavorite)
	if err == nil {
		jsonInvaildRequestMissingSubtypeWithFavorite, _ := json.Marshal(dst.InvaildRequestMissingSubtypeWithFavorite)
		if string(jsonInvaildRequestMissingSubtypeWithFavorite) == "{}" { // empty struct
			dst.InvaildRequestMissingSubtypeWithFavorite = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestMissingSubtypeWithFavorite = nil
	}

	// try to unmarshal data into InvaildRequestMissingSubtypeWithGroupOrName
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestMissingSubtypeWithGroupOrName)
	if err == nil {
		jsonInvaildRequestMissingSubtypeWithGroupOrName, _ := json.Marshal(dst.InvaildRequestMissingSubtypeWithGroupOrName)
		if string(jsonInvaildRequestMissingSubtypeWithGroupOrName) == "{}" { // empty struct
			dst.InvaildRequestMissingSubtypeWithGroupOrName = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestMissingSubtypeWithGroupOrName = nil
	}

	// try to unmarshal data into InvaildRequestName
	err = newStrictDecoder(data).Decode(&dst.InvaildRequestName)
	if err == nil {
		jsonInvaildRequestName, _ := json.Marshal(dst.InvaildRequestName)
		if string(jsonInvaildRequestName) == "{}" { // empty struct
			dst.InvaildRequestName = nil
		} else {
			match++
		}
	} else {
		dst.InvaildRequestName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InvaildRequestAssetIds = nil
		dst.InvaildRequestFavorite = nil
		dst.InvaildRequestGUID = nil
		dst.InvaildRequestGroup = nil
		dst.InvaildRequestInvalidDateTime = nil
		dst.InvaildRequestMissingSubtypeWithFavorite = nil
		dst.InvaildRequestMissingSubtypeWithGroupOrName = nil
		dst.InvaildRequestName = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetAsset400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetAsset400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAsset400Response) MarshalJSON() ([]byte, error) {
	if src.InvaildRequestAssetIds != nil {
		return json.Marshal(&src.InvaildRequestAssetIds)
	}

	if src.InvaildRequestFavorite != nil {
		return json.Marshal(&src.InvaildRequestFavorite)
	}

	if src.InvaildRequestGUID != nil {
		return json.Marshal(&src.InvaildRequestGUID)
	}

	if src.InvaildRequestGroup != nil {
		return json.Marshal(&src.InvaildRequestGroup)
	}

	if src.InvaildRequestInvalidDateTime != nil {
		return json.Marshal(&src.InvaildRequestInvalidDateTime)
	}

	if src.InvaildRequestMissingSubtypeWithFavorite != nil {
		return json.Marshal(&src.InvaildRequestMissingSubtypeWithFavorite)
	}

	if src.InvaildRequestMissingSubtypeWithGroupOrName != nil {
		return json.Marshal(&src.InvaildRequestMissingSubtypeWithGroupOrName)
	}

	if src.InvaildRequestName != nil {
		return json.Marshal(&src.InvaildRequestName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAsset400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InvaildRequestAssetIds != nil {
		return obj.InvaildRequestAssetIds
	}

	if obj.InvaildRequestFavorite != nil {
		return obj.InvaildRequestFavorite
	}

	if obj.InvaildRequestGUID != nil {
		return obj.InvaildRequestGUID
	}

	if obj.InvaildRequestGroup != nil {
		return obj.InvaildRequestGroup
	}

	if obj.InvaildRequestInvalidDateTime != nil {
		return obj.InvaildRequestInvalidDateTime
	}

	if obj.InvaildRequestMissingSubtypeWithFavorite != nil {
		return obj.InvaildRequestMissingSubtypeWithFavorite
	}

	if obj.InvaildRequestMissingSubtypeWithGroupOrName != nil {
		return obj.InvaildRequestMissingSubtypeWithGroupOrName
	}

	if obj.InvaildRequestName != nil {
		return obj.InvaildRequestName
	}

	// all schemas are nil
	return nil
}

type NullableGetAsset400Response struct {
	value *GetAsset400Response
	isSet bool
}

func (v NullableGetAsset400Response) Get() *GetAsset400Response {
	return v.value
}

func (v *NullableGetAsset400Response) Set(val *GetAsset400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAsset400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAsset400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAsset400Response(val *GetAsset400Response) *NullableGetAsset400Response {
	return &NullableGetAsset400Response{value: val, isSet: true}
}

func (v NullableGetAsset400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAsset400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReadAlbum403Response - struct for ReadAlbum403Response
type ReadAlbum403Response struct {
	AccessForbiddenError *AccessForbiddenError
	InvalidAPIKeyError *InvalidAPIKeyError
	OperationNotPermittedError *OperationNotPermittedError
}

// AccessForbiddenErrorAsReadAlbum403Response is a convenience function that returns AccessForbiddenError wrapped in ReadAlbum403Response
func AccessForbiddenErrorAsReadAlbum403Response(v *AccessForbiddenError) ReadAlbum403Response {
	return ReadAlbum403Response{
		AccessForbiddenError: v,
	}
}

// InvalidAPIKeyErrorAsReadAlbum403Response is a convenience function that returns InvalidAPIKeyError wrapped in ReadAlbum403Response
func InvalidAPIKeyErrorAsReadAlbum403Response(v *InvalidAPIKeyError) ReadAlbum403Response {
	return ReadAlbum403Response{
		InvalidAPIKeyError: v,
	}
}

// OperationNotPermittedErrorAsReadAlbum403Response is a convenience function that returns OperationNotPermittedError wrapped in ReadAlbum403Response
func OperationNotPermittedErrorAsReadAlbum403Response(v *OperationNotPermittedError) ReadAlbum403Response {
	return ReadAlbum403Response{
		OperationNotPermittedError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReadAlbum403Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessForbiddenError
	err = newStrictDecoder(data).Decode(&dst.AccessForbiddenError)
	if err == nil {
		jsonAccessForbiddenError, _ := json.Marshal(dst.AccessForbiddenError)
		if string(jsonAccessForbiddenError) == "{}" { // empty struct
			dst.AccessForbiddenError = nil
		} else {
			match++
		}
	} else {
		dst.AccessForbiddenError = nil
	}

	// try to unmarshal data into InvalidAPIKeyError
	err = newStrictDecoder(data).Decode(&dst.InvalidAPIKeyError)
	if err == nil {
		jsonInvalidAPIKeyError, _ := json.Marshal(dst.InvalidAPIKeyError)
		if string(jsonInvalidAPIKeyError) == "{}" { // empty struct
			dst.InvalidAPIKeyError = nil
		} else {
			match++
		}
	} else {
		dst.InvalidAPIKeyError = nil
	}

	// try to unmarshal data into OperationNotPermittedError
	err = newStrictDecoder(data).Decode(&dst.OperationNotPermittedError)
	if err == nil {
		jsonOperationNotPermittedError, _ := json.Marshal(dst.OperationNotPermittedError)
		if string(jsonOperationNotPermittedError) == "{}" { // empty struct
			dst.OperationNotPermittedError = nil
		} else {
			match++
		}
	} else {
		dst.OperationNotPermittedError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessForbiddenError = nil
		dst.InvalidAPIKeyError = nil
		dst.OperationNotPermittedError = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ReadAlbum403Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ReadAlbum403Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReadAlbum403Response) MarshalJSON() ([]byte, error) {
	if src.AccessForbiddenError != nil {
		return json.Marshal(&src.AccessForbiddenError)
	}

	if src.InvalidAPIKeyError != nil {
		return json.Marshal(&src.InvalidAPIKeyError)
	}

	if src.OperationNotPermittedError != nil {
		return json.Marshal(&src.OperationNotPermittedError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReadAlbum403Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccessForbiddenError != nil {
		return obj.AccessForbiddenError
	}

	if obj.InvalidAPIKeyError != nil {
		return obj.InvalidAPIKeyError
	}

	if obj.OperationNotPermittedError != nil {
		return obj.OperationNotPermittedError
	}

	// all schemas are nil
	return nil
}

type NullableReadAlbum403Response struct {
	value *ReadAlbum403Response
	isSet bool
}

func (v NullableReadAlbum403Response) Get() *ReadAlbum403Response {
	return v.value
}

func (v *NullableReadAlbum403Response) Set(val *ReadAlbum403Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReadAlbum403Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReadAlbum403Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadAlbum403Response(val *ReadAlbum403Response) *NullableReadAlbum403Response {
	return &NullableReadAlbum403Response{value: val, isSet: true}
}

func (v NullableReadAlbum403Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadAlbum403Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetHealth503Response - struct for GetHealth503Response
type GetHealth503Response struct {
	MaintenanceError *MaintenanceError
	ServiceUnavailable *ServiceUnavailable
}

// MaintenanceErrorAsGetHealth503Response is a convenience function that returns MaintenanceError wrapped in GetHealth503Response
func MaintenanceErrorAsGetHealth503Response(v *MaintenanceError) GetHealth503Response {
	return GetHealth503Response{
		MaintenanceError: v,
	}
}

// ServiceUnavailableAsGetHealth503Response is a convenience function that returns ServiceUnavailable wrapped in GetHealth503Response
func ServiceUnavailableAsGetHealth503Response(v *ServiceUnavailable) GetHealth503Response {
	return GetHealth503Response{
		ServiceUnavailable: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetHealth503Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MaintenanceError
	err = newStrictDecoder(data).Decode(&dst.MaintenanceError)
	if err == nil {
		jsonMaintenanceError, _ := json.Marshal(dst.MaintenanceError)
		if string(jsonMaintenanceError) == "{}" { // empty struct
			dst.MaintenanceError = nil
		} else {
			match++
		}
	} else {
		dst.MaintenanceError = nil
	}

	// try to unmarshal data into ServiceUnavailable
	err = newStrictDecoder(data).Decode(&dst.ServiceUnavailable)
	if err == nil {
		jsonServiceUnavailable, _ := json.Marshal(dst.ServiceUnavailable)
		if string(jsonServiceUnavailable) == "{}" { // empty struct
			dst.ServiceUnavailable = nil
		} else {
			match++
		}
	} else {
		dst.ServiceUnavailable = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MaintenanceError = nil
		dst.ServiceUnavailable = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetHealth503Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetHealth503Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetHealth503Response) MarshalJSON() ([]byte, error) {
	if src.MaintenanceError != nil {
		return json.Marshal(&src.MaintenanceError)
	}

	if src.ServiceUnavailable != nil {
		return json.Marshal(&src.ServiceUnavailable)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetHealth503Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MaintenanceError != nil {
		return obj.MaintenanceError
	}

	if obj.ServiceUnavailable != nil {
		return obj.ServiceUnavailable
	}

	// all schemas are nil
	return nil
}

type NullableGetHealth503Response struct {
	value *GetHealth503Response
	isSet bool
}

func (v NullableGetHealth503Response) Get() *GetHealth503Response {
	return v.value
}

func (v *NullableGetHealth503Response) Set(val *GetHealth503Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHealth503Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHealth503Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHealth503Response(val *GetHealth503Response) *NullableGetHealth503Response {
	return &NullableGetHealth503Response{value: val, isSet: true}
}

func (v NullableGetHealth503Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHealth503Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



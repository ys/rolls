/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ForbiddenExistsErrorErrors struct for ForbiddenExistsErrorErrors
type ForbiddenExistsErrorErrors struct {
	ResourceType []string `json:"&lt;resource_type&gt;,omitempty"`
}

// NewForbiddenExistsErrorErrors instantiates a new ForbiddenExistsErrorErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForbiddenExistsErrorErrors() *ForbiddenExistsErrorErrors {
	this := ForbiddenExistsErrorErrors{}
	return &this
}

// NewForbiddenExistsErrorErrorsWithDefaults instantiates a new ForbiddenExistsErrorErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForbiddenExistsErrorErrorsWithDefaults() *ForbiddenExistsErrorErrors {
	this := ForbiddenExistsErrorErrors{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ForbiddenExistsErrorErrors) GetResourceType() []string {
	if o == nil || o.ResourceType == nil {
		var ret []string
		return ret
	}
	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenExistsErrorErrors) GetResourceTypeOk() ([]string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ForbiddenExistsErrorErrors) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given []string and assigns it to the ResourceType field.
func (o *ForbiddenExistsErrorErrors) SetResourceType(v []string) {
	o.ResourceType = v
}

func (o ForbiddenExistsErrorErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType != nil {
		toSerialize["&lt;resource_type&gt;"] = o.ResourceType
	}
	return json.Marshal(toSerialize)
}

type NullableForbiddenExistsErrorErrors struct {
	value *ForbiddenExistsErrorErrors
	isSet bool
}

func (v NullableForbiddenExistsErrorErrors) Get() *ForbiddenExistsErrorErrors {
	return v.value
}

func (v *NullableForbiddenExistsErrorErrors) Set(val *ForbiddenExistsErrorErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenExistsErrorErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenExistsErrorErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenExistsErrorErrors(val *ForbiddenExistsErrorErrors) *NullableForbiddenExistsErrorErrors {
	return &NullableForbiddenExistsErrorErrors{value: val, isSet: true}
}

func (v NullableForbiddenExistsErrorErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenExistsErrorErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



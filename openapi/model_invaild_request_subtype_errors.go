/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvaildRequestSubtypeErrors struct for InvaildRequestSubtypeErrors
type InvaildRequestSubtypeErrors struct {
	Subtype []string `json:"&lt;subtype&gt;,omitempty"`
}

// NewInvaildRequestSubtypeErrors instantiates a new InvaildRequestSubtypeErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvaildRequestSubtypeErrors() *InvaildRequestSubtypeErrors {
	this := InvaildRequestSubtypeErrors{}
	return &this
}

// NewInvaildRequestSubtypeErrorsWithDefaults instantiates a new InvaildRequestSubtypeErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvaildRequestSubtypeErrorsWithDefaults() *InvaildRequestSubtypeErrors {
	this := InvaildRequestSubtypeErrors{}
	return &this
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *InvaildRequestSubtypeErrors) GetSubtype() []string {
	if o == nil || o.Subtype == nil {
		var ret []string
		return ret
	}
	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvaildRequestSubtypeErrors) GetSubtypeOk() ([]string, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *InvaildRequestSubtypeErrors) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given []string and assigns it to the Subtype field.
func (o *InvaildRequestSubtypeErrors) SetSubtype(v []string) {
	o.Subtype = v
}

func (o InvaildRequestSubtypeErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subtype != nil {
		toSerialize["&lt;subtype&gt;"] = o.Subtype
	}
	return json.Marshal(toSerialize)
}

type NullableInvaildRequestSubtypeErrors struct {
	value *InvaildRequestSubtypeErrors
	isSet bool
}

func (v NullableInvaildRequestSubtypeErrors) Get() *InvaildRequestSubtypeErrors {
	return v.value
}

func (v *NullableInvaildRequestSubtypeErrors) Set(val *InvaildRequestSubtypeErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableInvaildRequestSubtypeErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableInvaildRequestSubtypeErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvaildRequestSubtypeErrors(val *InvaildRequestSubtypeErrors) *NullableInvaildRequestSubtypeErrors {
	return &NullableInvaildRequestSubtypeErrors{value: val, isSet: true}
}

func (v NullableInvaildRequestSubtypeErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvaildRequestSubtypeErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



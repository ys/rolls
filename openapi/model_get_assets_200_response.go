/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetAssets200Response - struct for GetAssets200Response
type GetAssets200Response struct {
	Success *Success
	SuccessAssetIdsQueryParam *SuccessAssetIdsQueryParam
}

// SuccessAsGetAssets200Response is a convenience function that returns Success wrapped in GetAssets200Response
func SuccessAsGetAssets200Response(v *Success) GetAssets200Response {
	return GetAssets200Response{
		Success: v,
	}
}

// SuccessAssetIdsQueryParamAsGetAssets200Response is a convenience function that returns SuccessAssetIdsQueryParam wrapped in GetAssets200Response
func SuccessAssetIdsQueryParamAsGetAssets200Response(v *SuccessAssetIdsQueryParam) GetAssets200Response {
	return GetAssets200Response{
		SuccessAssetIdsQueryParam: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAssets200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Success
	err = newStrictDecoder(data).Decode(&dst.Success)
	if err == nil {
		jsonSuccess, _ := json.Marshal(dst.Success)
		if string(jsonSuccess) == "{}" { // empty struct
			dst.Success = nil
		} else {
			match++
		}
	} else {
		dst.Success = nil
	}

	// try to unmarshal data into SuccessAssetIdsQueryParam
	err = newStrictDecoder(data).Decode(&dst.SuccessAssetIdsQueryParam)
	if err == nil {
		jsonSuccessAssetIdsQueryParam, _ := json.Marshal(dst.SuccessAssetIdsQueryParam)
		if string(jsonSuccessAssetIdsQueryParam) == "{}" { // empty struct
			dst.SuccessAssetIdsQueryParam = nil
		} else {
			match++
		}
	} else {
		dst.SuccessAssetIdsQueryParam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Success = nil
		dst.SuccessAssetIdsQueryParam = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetAssets200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetAssets200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAssets200Response) MarshalJSON() ([]byte, error) {
	if src.Success != nil {
		return json.Marshal(&src.Success)
	}

	if src.SuccessAssetIdsQueryParam != nil {
		return json.Marshal(&src.SuccessAssetIdsQueryParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAssets200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Success != nil {
		return obj.Success
	}

	if obj.SuccessAssetIdsQueryParam != nil {
		return obj.SuccessAssetIdsQueryParam
	}

	// all schemas are nil
	return nil
}

type NullableGetAssets200Response struct {
	value *GetAssets200Response
	isSet bool
}

func (v NullableGetAssets200Response) Get() *GetAssets200Response {
	return v.value
}

func (v *NullableGetAssets200Response) Set(val *GetAssets200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAssets200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAssets200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAssets200Response(val *GetAssets200Response) *NullableGetAssets200Response {
	return &NullableGetAssets200Response{value: val, isSet: true}
}

func (v NullableGetAssets200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAssets200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



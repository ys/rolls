/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AlbumPayload struct for AlbumPayload
type AlbumPayload struct {
	// datetime in RFC-3339 format (subset of ISO-8601) requiring a UTC time ending with Z (so -00:00 or +00-00 suffix NOT allowed). The datetime must have date and time, including seconds, e.g. 2016-01-15T09:23:34Z.
	UserCreated *string `json:"userCreated,omitempty"`
	// datetime in RFC-3339 format (subset of ISO-8601) requiring a UTC time ending with Z (so -00:00 or +00-00 suffix NOT allowed). The datetime must have date and time, including seconds, e.g. 2016-01-15T09:23:34Z.
	UserUpdated *string `json:"userUpdated,omitempty"`
	Name *string `json:"name,omitempty"`
	Cover *AlbumPayloadCover `json:"cover,omitempty"`
	Parent *AlbumPayloadCover `json:"parent,omitempty"`
	PublishInfo *AlbumPayloadPublishInfo `json:"publishInfo,omitempty"`
}

// NewAlbumPayload instantiates a new AlbumPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbumPayload() *AlbumPayload {
	this := AlbumPayload{}
	return &this
}

// NewAlbumPayloadWithDefaults instantiates a new AlbumPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumPayloadWithDefaults() *AlbumPayload {
	this := AlbumPayload{}
	return &this
}

// GetUserCreated returns the UserCreated field value if set, zero value otherwise.
func (o *AlbumPayload) GetUserCreated() string {
	if o == nil || o.UserCreated == nil {
		var ret string
		return ret
	}
	return *o.UserCreated
}

// GetUserCreatedOk returns a tuple with the UserCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayload) GetUserCreatedOk() (*string, bool) {
	if o == nil || o.UserCreated == nil {
		return nil, false
	}
	return o.UserCreated, true
}

// HasUserCreated returns a boolean if a field has been set.
func (o *AlbumPayload) HasUserCreated() bool {
	if o != nil && o.UserCreated != nil {
		return true
	}

	return false
}

// SetUserCreated gets a reference to the given string and assigns it to the UserCreated field.
func (o *AlbumPayload) SetUserCreated(v string) {
	o.UserCreated = &v
}

// GetUserUpdated returns the UserUpdated field value if set, zero value otherwise.
func (o *AlbumPayload) GetUserUpdated() string {
	if o == nil || o.UserUpdated == nil {
		var ret string
		return ret
	}
	return *o.UserUpdated
}

// GetUserUpdatedOk returns a tuple with the UserUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayload) GetUserUpdatedOk() (*string, bool) {
	if o == nil || o.UserUpdated == nil {
		return nil, false
	}
	return o.UserUpdated, true
}

// HasUserUpdated returns a boolean if a field has been set.
func (o *AlbumPayload) HasUserUpdated() bool {
	if o != nil && o.UserUpdated != nil {
		return true
	}

	return false
}

// SetUserUpdated gets a reference to the given string and assigns it to the UserUpdated field.
func (o *AlbumPayload) SetUserUpdated(v string) {
	o.UserUpdated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlbumPayload) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayload) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlbumPayload) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlbumPayload) SetName(v string) {
	o.Name = &v
}

// GetCover returns the Cover field value if set, zero value otherwise.
func (o *AlbumPayload) GetCover() AlbumPayloadCover {
	if o == nil || o.Cover == nil {
		var ret AlbumPayloadCover
		return ret
	}
	return *o.Cover
}

// GetCoverOk returns a tuple with the Cover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayload) GetCoverOk() (*AlbumPayloadCover, bool) {
	if o == nil || o.Cover == nil {
		return nil, false
	}
	return o.Cover, true
}

// HasCover returns a boolean if a field has been set.
func (o *AlbumPayload) HasCover() bool {
	if o != nil && o.Cover != nil {
		return true
	}

	return false
}

// SetCover gets a reference to the given AlbumPayloadCover and assigns it to the Cover field.
func (o *AlbumPayload) SetCover(v AlbumPayloadCover) {
	o.Cover = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *AlbumPayload) GetParent() AlbumPayloadCover {
	if o == nil || o.Parent == nil {
		var ret AlbumPayloadCover
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayload) GetParentOk() (*AlbumPayloadCover, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *AlbumPayload) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given AlbumPayloadCover and assigns it to the Parent field.
func (o *AlbumPayload) SetParent(v AlbumPayloadCover) {
	o.Parent = &v
}

// GetPublishInfo returns the PublishInfo field value if set, zero value otherwise.
func (o *AlbumPayload) GetPublishInfo() AlbumPayloadPublishInfo {
	if o == nil || o.PublishInfo == nil {
		var ret AlbumPayloadPublishInfo
		return ret
	}
	return *o.PublishInfo
}

// GetPublishInfoOk returns a tuple with the PublishInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumPayload) GetPublishInfoOk() (*AlbumPayloadPublishInfo, bool) {
	if o == nil || o.PublishInfo == nil {
		return nil, false
	}
	return o.PublishInfo, true
}

// HasPublishInfo returns a boolean if a field has been set.
func (o *AlbumPayload) HasPublishInfo() bool {
	if o != nil && o.PublishInfo != nil {
		return true
	}

	return false
}

// SetPublishInfo gets a reference to the given AlbumPayloadPublishInfo and assigns it to the PublishInfo field.
func (o *AlbumPayload) SetPublishInfo(v AlbumPayloadPublishInfo) {
	o.PublishInfo = &v
}

func (o AlbumPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserCreated != nil {
		toSerialize["userCreated"] = o.UserCreated
	}
	if o.UserUpdated != nil {
		toSerialize["userUpdated"] = o.UserUpdated
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Cover != nil {
		toSerialize["cover"] = o.Cover
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.PublishInfo != nil {
		toSerialize["publishInfo"] = o.PublishInfo
	}
	return json.Marshal(toSerialize)
}

type NullableAlbumPayload struct {
	value *AlbumPayload
	isSet bool
}

func (v NullableAlbumPayload) Get() *AlbumPayload {
	return v.value
}

func (v *NullableAlbumPayload) Set(val *AlbumPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbumPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbumPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbumPayload(val *AlbumPayload) *NullableAlbumPayload {
	return &NullableAlbumPayload{value: val, isSet: true}
}

func (v NullableAlbumPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbumPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



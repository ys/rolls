/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CatalogPayloadSchemaPresets struct for CatalogPayloadSchemaPresets
type CatalogPayloadSchemaPresets struct {
	Favorites map[string]interface{} `json:"favorites,omitempty"`
}

// NewCatalogPayloadSchemaPresets instantiates a new CatalogPayloadSchemaPresets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogPayloadSchemaPresets() *CatalogPayloadSchemaPresets {
	this := CatalogPayloadSchemaPresets{}
	return &this
}

// NewCatalogPayloadSchemaPresetsWithDefaults instantiates a new CatalogPayloadSchemaPresets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogPayloadSchemaPresetsWithDefaults() *CatalogPayloadSchemaPresets {
	this := CatalogPayloadSchemaPresets{}
	return &this
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *CatalogPayloadSchemaPresets) GetFavorites() map[string]interface{} {
	if o == nil || o.Favorites == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPayloadSchemaPresets) GetFavoritesOk() (map[string]interface{}, bool) {
	if o == nil || o.Favorites == nil {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *CatalogPayloadSchemaPresets) HasFavorites() bool {
	if o != nil && o.Favorites != nil {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given map[string]interface{} and assigns it to the Favorites field.
func (o *CatalogPayloadSchemaPresets) SetFavorites(v map[string]interface{}) {
	o.Favorites = v
}

func (o CatalogPayloadSchemaPresets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Favorites != nil {
		toSerialize["favorites"] = o.Favorites
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogPayloadSchemaPresets struct {
	value *CatalogPayloadSchemaPresets
	isSet bool
}

func (v NullableCatalogPayloadSchemaPresets) Get() *CatalogPayloadSchemaPresets {
	return v.value
}

func (v *NullableCatalogPayloadSchemaPresets) Set(val *CatalogPayloadSchemaPresets) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogPayloadSchemaPresets) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogPayloadSchemaPresets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogPayloadSchemaPresets(val *CatalogPayloadSchemaPresets) *NullableCatalogPayloadSchemaPresets {
	return &NullableCatalogPayloadSchemaPresets{value: val, isSet: true}
}

func (v NullableCatalogPayloadSchemaPresets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogPayloadSchemaPresets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



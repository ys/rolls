/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetAsset200Response - struct for GetAsset200Response
type GetAsset200Response struct {
	SuccessImageAsset *SuccessImageAsset
	SuccessVideoAsset *SuccessVideoAsset
}

// SuccessImageAssetAsGetAsset200Response is a convenience function that returns SuccessImageAsset wrapped in GetAsset200Response
func SuccessImageAssetAsGetAsset200Response(v *SuccessImageAsset) GetAsset200Response {
	return GetAsset200Response{
		SuccessImageAsset: v,
	}
}

// SuccessVideoAssetAsGetAsset200Response is a convenience function that returns SuccessVideoAsset wrapped in GetAsset200Response
func SuccessVideoAssetAsGetAsset200Response(v *SuccessVideoAsset) GetAsset200Response {
	return GetAsset200Response{
		SuccessVideoAsset: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAsset200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SuccessImageAsset
	err = newStrictDecoder(data).Decode(&dst.SuccessImageAsset)
	if err == nil {
		jsonSuccessImageAsset, _ := json.Marshal(dst.SuccessImageAsset)
		if string(jsonSuccessImageAsset) == "{}" { // empty struct
			dst.SuccessImageAsset = nil
		} else {
			match++
		}
	} else {
		dst.SuccessImageAsset = nil
	}

	// try to unmarshal data into SuccessVideoAsset
	err = newStrictDecoder(data).Decode(&dst.SuccessVideoAsset)
	if err == nil {
		jsonSuccessVideoAsset, _ := json.Marshal(dst.SuccessVideoAsset)
		if string(jsonSuccessVideoAsset) == "{}" { // empty struct
			dst.SuccessVideoAsset = nil
		} else {
			match++
		}
	} else {
		dst.SuccessVideoAsset = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SuccessImageAsset = nil
		dst.SuccessVideoAsset = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GetAsset200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GetAsset200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAsset200Response) MarshalJSON() ([]byte, error) {
	if src.SuccessImageAsset != nil {
		return json.Marshal(&src.SuccessImageAsset)
	}

	if src.SuccessVideoAsset != nil {
		return json.Marshal(&src.SuccessVideoAsset)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAsset200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SuccessImageAsset != nil {
		return obj.SuccessImageAsset
	}

	if obj.SuccessVideoAsset != nil {
		return obj.SuccessVideoAsset
	}

	// all schemas are nil
	return nil
}

type NullableGetAsset200Response struct {
	value *GetAsset200Response
	isSet bool
}

func (v NullableGetAsset200Response) Get() *GetAsset200Response {
	return v.value
}

func (v *NullableGetAsset200Response) Set(val *GetAsset200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAsset200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAsset200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAsset200Response(val *GetAsset200Response) *NullableGetAsset200Response {
	return &NullableGetAsset200Response{value: val, isSet: true}
}

func (v NullableGetAsset200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAsset200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lightroom API Documentation

Lightroom API Documentation, made available through [adobe.io](https://developer.adobe.com). API Change Logs are available [here](https://developer.adobe.com/lightroom/lightroom-api-docs/release-notes/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CreateAlbum403Response - struct for CreateAlbum403Response
type CreateAlbum403Response struct {
	ForbiddenKeyError *ForbiddenKeyError
	ResourceExistsError *ResourceExistsError
}

// ForbiddenKeyErrorAsCreateAlbum403Response is a convenience function that returns ForbiddenKeyError wrapped in CreateAlbum403Response
func ForbiddenKeyErrorAsCreateAlbum403Response(v *ForbiddenKeyError) CreateAlbum403Response {
	return CreateAlbum403Response{
		ForbiddenKeyError: v,
	}
}

// ResourceExistsErrorAsCreateAlbum403Response is a convenience function that returns ResourceExistsError wrapped in CreateAlbum403Response
func ResourceExistsErrorAsCreateAlbum403Response(v *ResourceExistsError) CreateAlbum403Response {
	return CreateAlbum403Response{
		ResourceExistsError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAlbum403Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ForbiddenKeyError
	err = newStrictDecoder(data).Decode(&dst.ForbiddenKeyError)
	if err == nil {
		jsonForbiddenKeyError, _ := json.Marshal(dst.ForbiddenKeyError)
		if string(jsonForbiddenKeyError) == "{}" { // empty struct
			dst.ForbiddenKeyError = nil
		} else {
			match++
		}
	} else {
		dst.ForbiddenKeyError = nil
	}

	// try to unmarshal data into ResourceExistsError
	err = newStrictDecoder(data).Decode(&dst.ResourceExistsError)
	if err == nil {
		jsonResourceExistsError, _ := json.Marshal(dst.ResourceExistsError)
		if string(jsonResourceExistsError) == "{}" { // empty struct
			dst.ResourceExistsError = nil
		} else {
			match++
		}
	} else {
		dst.ResourceExistsError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ForbiddenKeyError = nil
		dst.ResourceExistsError = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateAlbum403Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateAlbum403Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAlbum403Response) MarshalJSON() ([]byte, error) {
	if src.ForbiddenKeyError != nil {
		return json.Marshal(&src.ForbiddenKeyError)
	}

	if src.ResourceExistsError != nil {
		return json.Marshal(&src.ResourceExistsError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAlbum403Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ForbiddenKeyError != nil {
		return obj.ForbiddenKeyError
	}

	if obj.ResourceExistsError != nil {
		return obj.ResourceExistsError
	}

	// all schemas are nil
	return nil
}

type NullableCreateAlbum403Response struct {
	value *CreateAlbum403Response
	isSet bool
}

func (v NullableCreateAlbum403Response) Get() *CreateAlbum403Response {
	return v.value
}

func (v *NullableCreateAlbum403Response) Set(val *CreateAlbum403Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAlbum403Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAlbum403Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAlbum403Response(val *CreateAlbum403Response) *NullableCreateAlbum403Response {
	return &NullableCreateAlbum403Response{value: val, isSet: true}
}

func (v NullableCreateAlbum403Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAlbum403Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


